{"version":3,"sources":["services/persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","services_persons","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","concat","remove","delete","notificationTypes","NORMAL","ERROR","Notification","_ref","message","notificationType","className","react_default","a","createElement","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","personService","persons","setState","addPerson","event","preventDefault","_this$state","state","newName","newPhonenumber","replacePerson","existingUser","nameExists","window","confirm","newPerson","name","number","person","prevState","updateItem","notificationBase","addNotification","catch","err","removePerson","personId","personToRemove","findPerson","filter","status","arguments","length","undefined","notificationMessage","setTimeout","filterPersonList","toLowerCase","includes","find","index","indexOf","toConsumableArray","slice","handleInputChange","field","newValue","target","value","defineProperty","_this$state2","components_Notification","htmlFor","onChange","App_PersonForm","onSubmit","onInputChange","App_PersonList","onClickButton","Component","PersonForm","Fragment","type","PersonList","_ref2","map","App_Person","key","Person","_ref3","onClick","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1e89c86c.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n    .then(response => response.data)\n}\n\nconst create = (newObject) => {\n  return axios.post(baseUrl, newObject)\n    .then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n    .then(response => response.data)\n}\n\nconst remove = id => {\n  return axios.delete(`${baseUrl}/${id}`)\n    .then(response => response)\n}\n\nexport default { getAll, create, update, remove }","import React from 'react'\n\nconst Notification = ({ message, notificationType }) => {\n  if (message === null) {\n    return null\n  }\n  const className = notificationType === notificationTypes.NORMAL ? 'normal' : 'error'\n  return (\n    <div className={className}>\n      {message}\n    </div>\n  )\n}\n\nexport const notificationTypes = {\n  NORMAL: 0,\n  ERROR: 1\n}\n\nexport default Notification\n","import React, { Component } from 'react';\nimport personService from './services/persons'\nimport Notification, { notificationTypes } from './components/Notification'\nimport './index.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      persons: [],\n      filter: '',\n      notificationMessage: null,\n      notificationType: null\n    }\n  }\n\n  componentDidMount = () => {\n    personService.getAll()\n      .then(persons => this.setState({ persons }))\n  }\n\n  addPerson = event => {\n    event.preventDefault()\n    const { newName, newPhonenumber } = this.state\n    let replacePerson = false\n    const existingUser = this.nameExists(newName)\n    if(existingUser) {\n      replacePerson = window.confirm(`${newName} on jo luettelossa, korvataanko vanha numero uudella?`)\n      if(!replacePerson) {\n        return\n      }\n    }\n    const newPerson = {\n      name: newName,\n      number: newPhonenumber\n    }\n    const serviceFunction = replacePerson\n      ? personService.update(existingUser.id, newPerson)\n      : personService.create(newPerson)\n\n    serviceFunction\n      .then(person => {\n        this.setState(prevState => {\n          const newArray = replacePerson\n            ? this.updateItem(person)\n            : prevState.persons.concat(person)\n          return { persons: newArray }\n        })\n        const notificationBase = replacePerson ? 'Päivitettiin ' : 'Lisättiin '\n        this.addNotification(notificationBase + person.name)\n      })\n      .catch(err => {\n        this.addNotification('Yhteystiedon lisääminen epäonnistui', notificationTypes.ERROR)\n      })\n  }\n\n  removePerson = personId => () => {\n    const personToRemove = this.findPerson(personId)\n    if(!window.confirm(`Oletko varma, että haluat poistaa kontaktin ${personToRemove.name}`)) {\n      return\n    }\n    personService.remove(personId)\n      .then(() => {\n        this.setState(prevState => ({ persons: prevState.persons.filter(person => person.id !== personId) }))\n        this.addNotification(`Poistettiin ${personToRemove.name}`)\n      })\n      .catch(err => {\n        if(err.response.status === 404) {\n          this.addNotification('Kontaktin on poistettu palvelimelta', notificationTypes.ERROR)\n          return this.setState(prevState => ({ persons: prevState.persons.filter(person => person.id !== personId) }))\n        }\n        this.addNotification('Kontaktin poistaminen epäonnistui', notificationTypes.ERROR)\n      })\n  }\n\n  addNotification = (message, notificationType = notificationTypes.NORMAL) => {\n    this.setState({ notificationMessage: message, notificationType })\n    setTimeout(() => this.setState(() => ({ notificationMessage: null, notificationType: null })), 3000)\n  }\n\n  filterPersonList = person => person.name.toLowerCase().includes(this.state.filter.toLowerCase())\n  findPerson = id => this.state.persons.find(person => person.id === id)\n  nameExists = name => this.state.persons.find(person => person.name.toLowerCase() === name.toLowerCase())\n  updateItem = newPerson => {\n    const { persons } = this.state\n    const index = persons.indexOf(persons.find(person => person.id === newPerson.id))\n    return [\n      ...persons.slice(0, index),\n      newPerson,\n      ...persons.slice(index + 1)\n    ]\n  }\n  render() {\n    const { filter, notificationMessage, notificationType } = this.state\n    return (\n      <div>\n        <h1>Puhelinluettelo</h1>\n        <Notification message={notificationMessage} notificationType={notificationType} />\n        <div>\n          <label htmlFor='filter' >Rajaa näytettäviä: </label>\n          <input\n            name='filter'\n            value={filter}\n            onChange={this.handleInputChange('filter')} />\n        </div>\n        <PersonForm\n          onSubmit={this.addPerson}\n          onInputChange={this.handleInputChange}\n        />\n        <PersonList\n          persons={this.state.persons.filter(this.filterPersonList)}\n          onClickButton={this.removePerson}\n        />\n      </div >\n    )\n  }\n\n  handleInputChange = field => event => {\n    const newValue = event.target.value\n    this.setState({\n      [field]: newValue\n    })\n  }\n}\n\nconst PersonForm = ({ onSubmit, onInputChange, newName, newPhonenumber }) =>\n  <>\n    <h2>Lisää uusi</h2>\n    <form onSubmit={onSubmit}>\n      <div>\n        <label htmlFor='name' >Nimi: </label>\n        <input\n          name='name'\n          value={newName}\n          onChange={onInputChange('newName')} />\n      </div>\n      <div>\n        <label htmlFor='number' >Puhelinnumero: </label>\n        <input\n          name='number'\n          value={newPhonenumber}\n          onChange={onInputChange('newPhonenumber')} />\n      </div>\n      <button type=\"submit\">Tallenna</button>\n    </form>\n  </>\n\nconst PersonList = ({ persons, onClickButton }) => (\n  <>\n    <h2>Numerot</h2>\n    {persons.map(person =>\n      <Person\n        key={person.id}\n        person={person}\n        onClickButton={onClickButton}\n      />\n    )}\n  </>\n)\n\nconst Person = ({ person, onClickButton }) =>\n  <div>\n    <p>{person.name} {person.number}\n      <button onClick={onClickButton(person.id)} >Poista</button>\n    </p>\n  </div>\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}